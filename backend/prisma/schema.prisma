generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Campaign {
  id             String   @id @default(uuid())
  title          String
  landingPageUrl String   @map("landing_page_url")
  isRunning      Boolean  @default(false) @map("is_running")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  payouts Payout[]

  @@map("campaigns")
}

model Payout {
  id        String   @id @default(uuid())
  country   String
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  campaignId String   @map("campaign_id")
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, country])
  @@map("payouts")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String?
  name          String?
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  image         String?

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Provider {
  id         String   @id @default(cuid())
  providerId String   @unique
  name       String
  type       String
  enabled    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]

  @@map("providers")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  accountId         String
  providerId        String // This should match Provider.providerId
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  password          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider Provider @relation(fields: [providerId], references: [providerId], onDelete: Cascade)

  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@unique([providerId, providerAccountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  updatedAt DateTime @default(now()) @updatedAt

  @@unique([identifier, value])
  @@map("verifications")
}
