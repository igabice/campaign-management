
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String   @id @default(cuid())
  email                  String   @unique
  name                   String?
  emailVerified          Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  image                  String?
  twoFactorEnabled       Boolean  @default(false)
  reEngagementEmailsSent Json?    @map("re_engagement_emails_sent")
  onboardingEmailsSent   Json?    @map("onboarding_emails_sent")

  accounts      Account[]
  sessions      Session[]
  organizations Organization[]
  memberships   Member[]
  sentInvites   Invite[]
  posts         Post[]
  plans         Plan[]
  notifications Notification[]
  preferences   UserPreference?
  blogs         Blog[]

  stripeCustomerId String?

  @@map("users")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  accountId         String
  providerId        String // This should match Provider.providerId
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  password          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@unique([providerId, providerAccountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  updatedAt DateTime @default(now()) @updatedAt

  @@unique([identifier, value])
  @@map("verifications")
}

model Organization {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  members     Member[]
  socialMedia SocialMedia[]
  invites     Invite[]
  posts       Post[]
  plans       Plan[]
  vendors     Vendor[]
  contracts   Contract[]

  @@map("organizations")
}

model Member {
  id        String   @id @default(uuid())
  organizationId    String   @map("organization_id")
  userId    String   @map("user_id")
  status    String   @default("active")
  role      String   @default("member")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("members")
}

model SocialMedia {
  id            String    @id @default(uuid())
  accountName   String
  organizationId        String    @map("organization_id")
  platform      String
  profileLink   String    @map("profile_link")
  image         String?
  status        String    @default("active")
  lastCheckedAt DateTime? @map("last_checked_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  organization  Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  posts Post[]

  @@map("social_media")
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  status    String   @default("pending")
  inviterId String   @map("inviter_id")
  organizationId    String   @map("organization_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  inviter User @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@map("invites")
}

model Post {
  id            String    @id @default(uuid())
  title         String?
  content       String
  image         String?
  scheduledDate DateTime  @map("scheduled_date")
  sendReminder  Boolean   @default(false) @map("send_reminder")
  reminderSent  Boolean   @default(false) @map("reminder_sent")
  publishedAt   DateTime? @map("published_at")
  plannerId     String?   @map("planner_id")
  planId        String?   @map("plan_id")
  createdBy     String    @map("created_by")
  status        String    @default("Draft")
  organizationId        String    @map("organization_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  creator      User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization         Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  socialMedias SocialMedia[]
  plan         Plan?         @relation(fields: [planId], references: [id], onDelete: SetNull)

  @@map("posts")
}

model Plan {
  id          String   @id @default(uuid())
  title       String
  description String?
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  tone        String?
  status      String   @default("draft")
  createdBy   String   @map("created_by")
  organizationId      String   @map("organization_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  creator User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  posts   Post[]

  @@map("plans")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  objectId    String?
  objectType  String?
  description String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model TopicPreference {
  id             String   @id @default(cuid())
  userPreferenceId String
  topic          String
  weight         Int      @default(1) // 1-5 scale for preference weight
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userPreference UserPreference @relation(fields: [userPreferenceId], references: [id], onDelete: Cascade)

  @@unique([userPreferenceId, topic])
  @@map("topic_preferences")
}

model UserPreference {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Notification Preferences
  emailNotifications Boolean @default(true)
  telegramEnabled    Boolean @default(false)
  telegramChatId     String?
  whatsappEnabled    Boolean @default(false)
  whatsappNumber     String?

  // Content Planning Preferences
  postsPerDay        Int?    @default(3)
  postsPerWeek       Int?    @default(15)
  preferredPostTimes String[] // Store as JSON array of preferred times ["09:00", "14:00", "19:00"]
  preferredPostDays  String[] // Store as JSON array of preferred times ["MON", "TUES", "WED"]

  // Content Topics
  topics             TopicPreference[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("user_preferences")
}

model Subscription {
  id                   String    @id
  plan                 String
  referenceId          String
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String?
  periodStart          DateTime?
  periodEnd            DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  cancelAtPeriodEnd    Boolean?  @default(false)
  seats                Int?

  @@map("subscription")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())

  @@map("contacts")
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  content     String   // Rich text content
  slug        String   @unique
  tags        String[] // Array of tags
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("blogs")
}

model Vendor {
  id String @id @default(cuid())
  companyName String // Vendor Company Name
  primaryContactName String? // Primary Contact Name
  primaryContactPhone String? // Primary Contact Phone
  address String? // Address
  website String? // Website
  primaryContactEmail String? // Primary Contact Email
  serviceDescription String // Service Description
  dataProcessingRole String // Data Processing Role
  businessUnitOwner String // Business Unit Owner

  // Relations
  documents VendorDocument[]
  jurisdictionConfigs JurisdictionConfig[]
  contracts Contract[]

  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vendors")
}

model VendorDocument {
  id String @id @default(cuid())
  fileName String // Original file name
  filePath String // Path to stored file
  fileSize Int // File size in bytes
  mimeType String // File type
  documentType String // Contract, DPA, Security Assessment, etc.
  version String? // Version (e.g., 1.0, 2.1a)
  description String? // Brief description

  // Relations
  vendorId String?
  vendor Vendor? @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  // Timestamps
  uploadedAt DateTime @default(now())

  @@map("documents")
}

model Contract {
  id String @id @default(cuid())
  title String // Contract Title (defaults to filename)
  contractType String // Contract Type
  status String @default("Active") // Active, Expired, etc.
  expiryDate DateTime? // Expiry Date
  fileName String // Original file name
  filePath String // Path to stored file
  fileSize Int // File size in bytes
  mimeType String // File type
  description String? // Brief description

  // Relations
  vendorId String
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contracts")
}


model JurisdictionConfig {
  id String @id @default(cuid())
  country String // Country
  fileName String // File name for jurisdiction requirements
  filePath String // Path to stored file
  requiresDueDiligence Boolean @default(false) // Specific Due Diligence Required?
  dueDiligenceRequirements String? // Description of requirements or link to template
  defaultDPATemplate String? // Default DPA Template file name
  otherNotes String? // Other notes/requirements

  // Relations
  vendorId String
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jurisdiction_configs")
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  UNDER_REVIEW
}
